package com.anonos.bigprivacy.starter;

import com.anonos.bigprivacy.privacypolicyapi.DataType;
import com.anonos.bigprivacy.privacypolicyapi.Field;
import com.anonos.bigprivacy.privacypolicyapi.RuleExecutionException;
import com.anonos.bigprivacy.privacypolicyapi.LoadablePrivacyPolicy;
import com.anonos.bigprivacy.privacypolicyapi.PrivacyPolicy;
import com.anonos.bigprivacy.privacypolicyapi.PrivacyPolicyRule;
import com.google.common.collect.Sets;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.security.MessageDigest;
/**
 * A sample policy that doesn't do much.
 */
@LoadablePrivacyPolicy
public class LicenceNumberEncryption implements PrivacyPolicy {

    private static final ThreadLocal<List<PrivacyPolicyRule>> rules = new ThreadLocal<List<PrivacyPolicyRule>>() {
        @Override
        protected List<PrivacyPolicyRule> initialValue() {
            final List<PrivacyPolicyRule> rules = new ArrayList<>();
            rules.add(new StarterRule());
            return rules;
        }
    };
    public String getId() {
        // TODO Return a unique ID.  You may want to use a V4 UUID, which may
        // TODO be generated here: <https://www.uuidgenerator.net/>
        return "0d34710c-ab72-431e-a5ab-6845a7f48c0e";
    }

    public String getName() {
        // TODO Return the name of this policy.  It should be a short string.
        return "Licence Number Encrypt";
    }

    public String getDescription() {
        // TODO Return a long but concise description of this policy.
        return "Licence Number Encrypt";
    }

    public Set<DataType> getInputTypes() {
        // TODO Return a list of data types accepted by this policy.  Most
        // TODO of the time, this will just be "TEXT", which is already
        // TODO set up below.
        final Set<DataType> dataTypes = new HashSet<DataType>();
        dataTypes.add(DataType.TEXT);
        return dataTypes;
    }

    public List<PrivacyPolicyRule> getRules() {
        // TODO Return a list of instantiated rules for this policy.  You may
        // TODO want to store rule objects in a class member Set or List for
        // TODO easy retrieval.
        return rules.get();
    }

    /**
     * A sample rule.
     */
    private static class StarterRule implements PrivacyPolicyRule {
        public String getName() {
            // TODO Return the name of this rule.  It should be a short string.
            // TODO This name will be inserted into the name of the new field
            // TODO that is generated by this rule, so keep the name concise.
            return "Hiding the Licence Number";
        }

        public String getResult(final Object input, final List<Field> fields, final List<Object> row) throws RuleExecutionException {
            // TODO Perform the rule computation on the input value and return the result.  This
            // TODO rule may examine the entire record that is undergoing transformation by
            // TODO reading the "fields" and "row" parameters.  Any errors that occur during
            // TODO rule execution should cause a RuleExecutionException to be thrown.  Note
            // TODO that null is an acceptable value to return from this method, but it should
            // TODO generally only be used if the input is also null.

            try {
                MessageDigest md = MessageDigest.getInstance("MD5");

                md.update(input.toString().getBytes());

                byte byteData[] = md.digest();

                //convert the byte to hex format method 1
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < byteData.length; i++) {
                    sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
                }


                return sb.toString();
            }
            catch (NoSuchAlgorithmException e){
                return null;
            }


        }
    }
}
